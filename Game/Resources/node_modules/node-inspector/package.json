{
  "name": "node-inspector",
  "version": "0.5.0",
  "description": "Web Inspector based nodeJS debugger",
  "homepage": "http://github.com/node-inspector/node-inspector",
  "author": {
    "name": "Danny Coates",
    "email": "dannycoates@gmail.com"
  },
  "keywords": [
    "debug",
    "debugger",
    "inspector",
    "profiler"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/node-inspector/node-inspector.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "bin": {
    "node-inspector": "./bin/inspector.js"
  },
  "dependencies": {
    "socket.io": "~0.9.14",
    "express": "~3.4",
    "async": "~0.2.8",
    "glob": "~3.2.1",
    "rc": "~0.3.0",
    "strong-data-uri": "~0.1.0"
  },
  "devDependencies": {
    "mocha": "latest",
    "chai": "latest"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "mocha",
    "lint": "./tools/gjslint.sh"
  },
  "contributors": [
    {
      "name": "Danny Coates",
      "email": "dannycoates@gmail.com"
    },
    {
      "name": "3y3",
      "email": "3y3@bk.ru"
    },
    {
      "name": "Adam Hořčica",
      "email": "horcicaa@gmail.com"
    },
    {
      "name": "Akzhan Abdulin",
      "email": "akzhan.abdulin@gmail.com"
    },
    {
      "name": "Glenn Block",
      "email": "glenn.block@gmail.com"
    },
    {
      "name": "Ionuț G. Stan",
      "email": "ionut.g.stan@gmail.com"
    },
    {
      "name": "Kasper Ligaard",
      "email": "kasperligaard@gmail.com"
    },
    {
      "name": "Mark Constable",
      "email": "markc@renta.net"
    },
    {
      "name": "Michael Schoonmaker",
      "email": "michael@strongloop.com"
    },
    {
      "name": "Miroslav Bajtos",
      "email": "miroslav@strongloop.com"
    },
    {
      "name": "Panagiotis Astithas",
      "email": "pastith@gmail.com"
    },
    {
      "name": "Peter Flannery",
      "email": "flannery.peter@ntlworld.com"
    },
    {
      "name": "Philip Tellis",
      "email": "philip.tellis@gmail.com"
    },
    {
      "name": "Sam Roberts",
      "email": "sam@strongloop.com"
    }
  ],
  "readme": "# Node Inspector\n\n[![Build Status](https://travis-ci.org/node-inspector/node-inspector.png?branch=master)](https://travis-ci.org/node-inspector/node-inspector)\n[![Dependency Status](https://gemnasium.com/node-inspector/node-inspector.png)](https://gemnasium.com/node-inspector/node-inspector)\n[![NPM version](https://badge.fury.io/js/node-inspector.png)](http://badge.fury.io/js/node-inspector)\n\n\n## Overview\nNode Inspector is a debugger interface for node.js using the\nBlink Developer Tools (former WebKit Web Inspector).\n\n## Features\n\nThe Blink DevTools debugger is a great javascript debugger interface;\nit works just as well for node. Node Inspector supports almost all\nof the debugging features of DevTools.\n\n* Navigate in your source files\n* Set breakpoints (and specify trigger conditions)\n* Break on exceptions\n* Step over, step in, step out, resume (continue)\n* Continue to location\n* Disable/enable all breakpoints\n* Inspect scopes, variables, object properties\n* Hover your mouse over an expression in your source to display its value in\n  a tooltip\n* Edit variables and object properties\n* (etc.)\n\n### Cool stuff\n* Node Inspector uses WebSockets, so no polling for breaks.\n* Remote debugging\n* [Live edit of running code](http://github.com/dannycoates/node-inspector/wiki/LiveEdit),\n  optionally persisting changes back to the file-system.\n* Set breakpoints in files that are not loaded into V8 yet - useful for\n  debugging module loading/initialization.\n* Javascript from top to bottom :)\n* Embeddable in other applications - see [Embedding HOWTO](docs/embedding.md)\n  for more details.\n\n## Known Issues\n\nThis is beta-quality code, so use at your own risk.\n\n* Be careful about viewing the contents of Buffer objects,\n  each byte is displayed as an individual array element;\n  for most Buffers this will take too long to render.\n* While not stopped at a breakpoint the console doesn't always\n  behave as you might expect. See issue #146.\n* Profiler is not implemented yet. Have a look at\n  [node-webkit-agent](https://github.com/c4milo/node-webkit-agent)\n  in the meantime.\n* Break on uncaught exceptions does not work because of missing\n  [support in node](https://github.com/joyent/node/pull/5713).\n* Debugging multiple processes (e.g. cluster) is cumbersome.\n\n## Getting Started\n\n### Requirements\n\n* [node.js](http://github.com/ry/node)\n  - version 0.8 or later\n* [npm](http://github.com/isaacs/npm)\n* A Blink-based browser (i.e. Google Chrome)\n\n### Install\n\n* With [npm](http://github.com/isaacs/npm)\n\n        $ npm install -g node-inspector\n\n### Enable debug mode\n\nTo use node-inspector, enable debugging on the node you wish to debug.\nYou can either start node with a debug flag like:\n\n    $ node --debug your/node/program.js\n\nor, to pause your script on the first line:\n\n    $ node --debug-brk your/short/node/script.js\n\nOr you can enable debugging on a node that is already running by sending\nit a signal:\n\n1. Get the PID of the node process using your favorite method.\n`pgrep` or `ps -ef` are good\n\n\t\t$ pgrep -l node\n\t\t2345 node your/node/server.js\n\n2. Send it the USR1 signal\n\n\t\t$ kill -s USR1 2345\n\nGreat! Now you are ready to attach node-inspector\n\n### Debugging\n\n1. start the inspector. I usually put it in the background\n\n\t\t$ node-inspector &\n\n2. open http://127.0.0.1:8080/debug?port=5858 in Chrome\n\n3. you should now see the javascript source from node. If you don't, click the scripts tab.\n\n4. select a script and set some breakpoints (far left line numbers)\n\n5. then watch the [screencasts](http://www.youtube.com/view_play_list?p=A5216AC29A41EFA8)\n\nFor more information on getting started see the [wiki](http://github.com/dannycoates/node-inspector/wiki/Getting-Started---from-scratch)\n\nnode-inspector works almost exactly like the web inspector in\nChrome. Here's a good [overview](http://code.google.com/chrome/devtools/docs/scripts.html) of the UI\n\n### Inspector options\n\nNode-inspector uses [rc](https://npmjs.org/package/rc)\n[[github]](https://github.com/dominictarr/rc) module to collect options.\n\nPlaces for configuration:\n* command line arguments (parsed by optimist)\n* enviroment variables prefixed with ```node-inspector_```\n* if you passed an option ```--config file``` then from that file\n* a local ```.node-inspectorrc``` or the first found looking in ```./ ../ ../../\n ../../../``` etc.\n* ```$HOME/.node-inspectorrc```\n* ```$HOME/.node-inspector/config```\n* ```$HOME/.config/node-inspector```\n* ```$HOME/.config/node-inspector/config```\n* ```/etc/node-inspectorrc```\n* ```/etc/node-inspector/config```\n* options from ```config.json``` for backward compatibility\n* defaults described in Node Inspector`s [./lib/config.js](lib/config.js).\n\nAll configuration sources that where found will be flattened into one object,\nso that sources earlier in this list override later ones.\n\n\n\nList of predefined options:\n```\n         Option             Default                  Description\n    --help            |                 |   Print information about options\n    --web-port        |      8080       |   Port to host the inspector\n    --web-host        |    127.0.0.1    |   Host to listen on\n    --debug-port      |      5858       |   Port to connect to the debugging app\n    --save-live-edit  |      false      |   Save live edit changes to disk (update the edited files)\n    --hidden          |       []        |   Array of files to hide from the UI\n                      |                 |   Breakpoints in these files will be ignored\n```\n\n## FAQ / WTF\n\n1. My script runs too fast to attach the debugger.\n\n  > use `--debug-brk` to pause the script on the first line\n\n2. I got the ui in a weird state.\n\n  > when in doubt, refresh\n\n3. Can I debug remotely?\n\n  > Yes. node-inspector must be running on the same machine,\n  > but your browser can be anywhere.\n  > Just make sure port 8080 is accessible\n\n4. How to specify list of files to hide?\n\n  > Create a JSON-encoded array, don't forget to escape the quote characters\n  > when using a command-line option.\n  >\n  >     $ node-inspector --hidden='[\"node_modules/framework\"]'\n  >\n  > Note that the array items are interpreted as regular expressions.\n\n## Contributing Code\n\nMaking Node Inspector the best debugger for node.js cannot be achieved without\nthe help of the community. The following resources should help you to get\nstarted.\n\n* [Contributing](https://github.com/node-inspector/node-inspector/wiki/Contributing)\n* [Developer's Guide](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide)\n* [Easy Picks](https://github.com/node-inspector/node-inspector/issues?direction=asc&labels=Easy+Pick&page=1&sort=updated&state=open)\n\n## Thanks\n\n[Danny Coates](https://github.com/dannycoates) for starting the project\nand maintaining it for several years.\n\n[StrongLoop](http://strongloop.com) for upgrading to the Blink front-end\nand maintaining the project onwards.\n\nAnd of course all developers that contributed patches and features, as listed\nin the [AUTHORS](AUTHORS) file.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/node-inspector/node-inspector/issues"
  },
  "_id": "node-inspector@0.5.0",
  "dist": {
    "shasum": "2cf588464050fea9edf7bdcdebf869bb0ae2545f"
  },
  "_from": "node-inspector@0.5.x",
  "_resolved": "https://registry.npmjs.org/node-inspector/-/node-inspector-0.5.0.tgz"
}
