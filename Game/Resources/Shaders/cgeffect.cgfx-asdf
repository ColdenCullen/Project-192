struct BufferData
{
	in float3 position : POSITION;
	in float3 color : COLOR;
};

struct VertexToFragment
{
	float4 position : POSITION;
	float4 color : COLOR;
};

float4x4 cameraMatrix;
float4x4 projectionMatrix;
float4x4 modelMatrix;

// Vertex entry point
VertexToFragment vmain( BufferData IN, uniform float4x4 cameraMatrix, uniform float4x4 projectionMatrix, uniform float4x4 modelMatrix )
{
	VertexToFragment OUT;

	OUT.position = mul( projectionMatrix, mul( cameraMatrix, mul( modelMatrix, float4( IN.position, 1.0 ) ) ) );
	OUT.color = float4( IN.position, 1.0 );

	return OUT;
}

// Fragment entry point
float4 fmain( VertexToFragment IN ) : COLOR
{
	IN.color = float4( 1.0, 0.0, 0.0, 1.0 );
	return IN.color;
}

// Generic technique
technique cgeffect
{
	pass p0
	{
		VertexProgram = compile gp4vp vmain( cameraMatrix, projectionMatrix, modelMatrix );
		FragmentProgram = compile gp4fp fmain();
	}
}

// Technique for GLSL
technique cgeffect_glsl
{
	pass p0
	{
		VertexProgram = compile glslv vmain( cameraMatrix, projectionMatrix, modelMatrix );
		FragmentProgram = compile glslf fmain();
	}
}
